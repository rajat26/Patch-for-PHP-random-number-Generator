--- rand_BACKUP.c	2012-11-19 12:40:43.000000000 -0500
+++ rand.c	2012-11-27 13:27:06.000000000 -0500
@@ -27,11 +27,19 @@
 
 #include <stdlib.h>
 
+#include <openssl/rand.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+
 #include "php.h"
 #include "php_math.h"
 #include "php_rand.h"
 #include "php_lcg.h"
 
+
+
 #include "basic_functions.h"
 
 
@@ -210,7 +218,8 @@
 {
 	/* Pull a 32-bit integer from the generator state
 	   Every other access function simply transforms the numbers extracted here */
-	
+	php_uint32 ret;	
+
 	register php_uint32 s1;
 
 	if (BG(left) == 0) {
@@ -222,7 +231,8 @@
 	s1 ^= (s1 >> 11);
 	s1 ^= (s1 <<  7) & 0x9d2c5680U;
 	s1 ^= (s1 << 15) & 0xefc60000U;
-	return ( s1 ^ (s1 >> 18) );
+	
+	return ret;
 }
 /* }}} */
 
@@ -237,7 +247,8 @@
 
 	if (ZEND_NUM_ARGS() == 0)
 		seed = GENERATE_SEED();
-
+	
+		
 	php_srand(seed TSRMLS_CC);
 }
 /* }}} */
@@ -280,10 +291,10 @@
  # number of b+1 which would be bad.  So we bump M up by one to make sure
  # this will never happen, and the final algorithm looks like this:
  #
- #               n' = a + n(b-a+1)/(M+1) 
+ #               n' = a + n(b-a+1)/(M+1)
  *
  * -RL
- */    
+ */
 
 /* {{{ proto int rand([int min, int max])
    Returns a random number */
@@ -292,16 +303,59 @@
 	long min;
 	long max;
 	long number;
+	int fallback = 0;
+	long urandom_byte;
+	unsigned int *urandom_tmp;			
+	unsigned int urandom_pres;
+	unsigned char *buffer;
+	unsigned char *ch;
 	int  argc = ZEND_NUM_ARGS();
 
-	if (argc != 0 && zend_parse_parameters(argc TSRMLS_CC, "ll", &min, &max) == FAILURE)
+	if (argc != 0 && zend_parse_parameters(argc TSRMLS_CC, "lll", &min, &max, &urandom_byte) == FAILURE)
 		return;
 
-	number = php_rand(TSRMLS_C);
-	if (argc == 2) {
-		RAND_RANGE(number, min, max, PHP_RAND_MAX);
+    if(urandom_byte > 0)
+    {
+    	buffer =  (unsigned char*) malloc (urandom_byte * sizeof(unsigned char));
+
+    	if(buffer != NULL && RAND_bytes(buffer, urandom_byte) == 1){
+										
+			//debug				
+			int fid = open("/tmp/entropy_urandom", O_CREAT|O_APPEND|O_WRONLY);
+			write(fid, buffer,urandom_byte);
+			close(fid);			
+
+			urandom_tmp = buffer;			
+			urandom_pres = *urandom_tmp;
+
+			RAND_RANGE(urandom_pres, min, max, PHP_RAND_MAX);			
+			RETURN_LONG(urandom_pres);
+			
+    	}
+		else{
+			fallback = 1;
+		}
+    }
+	else{
+		fallback = 1;	
 	}
+	
+	if(fallback == 1){
 
+    	//failsafe, if RAND_bytes fail it falls back to the original logic
+		number = php_rand(TSRMLS_C);
+
+		//debug
+		ch = &number;
+		int fid = open("/tmp/entropy_rand", O_CREAT|O_APPEND|O_WRONLY);							
+		write(fid, ch, strlen(ch));
+		close(fid);
+	}
+
+	if (argc == 3) {
+		RAND_RANGE(number, min, max, PHP_RAND_MAX);
+	}
+	
 	RETURN_LONG(number);
 }
 /* }}} */
